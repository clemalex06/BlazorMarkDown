@using BlazorMarkDownAppJwt.Client.Components
@using BlazorMarkDownAppJwt.Shared
@using System.Text
@using Newtonsoft.Json
@inject HttpClient HttpClient
@inject IJSRuntime jsr
@inject NavigationManager nav

@if (isLoading)
{
	<div class="spinner"></div>
}
else if (MarkDownId != null && MarkDownId != 0)
{
	<div class="row">
		@if (!string.IsNullOrWhiteSpace(successMessage))
		{
			<div class="alert alert-success" role="alert">
				@successMessage
			</div>
		}
		@if (!string.IsNullOrWhiteSpace(errorMessage))
		{
			<div class="alert alert-danger" role="alert">
				@errorMessage
			</div>
		}
	</div>
	<div class="row">
		<div class="col-6">
			<h3>MarkDown @MarkDownId : Editor</h3>
			@if (!string.IsNullOrWhiteSpace(UserMail))
			{
				<div class="mb-3 text-right">
					<button class="btn btn-success" @onclick="()=>UpsertMarkDown(HttpMethod.Post)">Update MarkDown</button>
					<button class="btn btn-success" @onclick="()=>UpsertMarkDown(HttpMethod.Put)">Create New MarkDown</button>
				</div>
				<textarea class="form-control text-area-resized" @bind="markDownModel.Body"></textarea>
			}
			else
			{
				<textarea class="form-control text-area-resized" disabled @bind="markDownModel.Body"></textarea>
			}
		</div>
		@if (checkPreview)
		{
			<div class="col-6">
				<h3>MarkDown @MarkDownId : PreView</h3>
				@if (!string.IsNullOrWhiteSpace(UserMail))
				{
					<div class="mb-3 text-right">
						<button class="btn btn-primary" @onclick="ReloadPreview">Reload Preview</button>
						<button class="btn btn-primary" @onclick="()=>CheckPreview(false)">View Html generated</button>
					</div>
				}
				<div>@markupString</div>
			</div>
		}
		else
		{
			<div class="col-6">
				<h3>MarkDown @MarkDownId : Html Generated</h3>
				@if (!string.IsNullOrWhiteSpace(UserMail))
				{
					<div class="mb-3 text-right">
						<button class="btn btn-primary" @onclick="ReloadPreview">Reload Preview</button>
						<button class="btn btn-primary" @onclick="()=>CheckPreview(true)">View Preview generated</button>
					</div>
				}
				<div>@markDownModel.Html</div>
			</div>
		}
	</div>
}
else
{
	<div class="col-6">
		<h3>README</h3>
		<div>@markupString</div>
	</div>
}

@code {

	[Parameter]
	public string? UserMail { get; set; }

	[Parameter]
	public long? MarkDownId { get; set; }

	private bool isLoading = true;

	private MarkupString markupString;

	private string successMessage = string.Empty;
	private string errorMessage = string.Empty;

	private bool checkPreview = true;

	private MarkDownModel markDownModel = new MarkDownModel
	{
		Id = 0,
		Body = string.Empty
	};

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		isLoading = true;
		successMessage = string.Empty;
		errorMessage = string.Empty;
		try
		{
			var urlRoute = MarkDownId == null ? "api/markdown/readme/" : $"/api/markdown?currentId={MarkDownId}";
			var requestMsg = new HttpRequestMessage(HttpMethod.Get, urlRoute);
			var response = await HttpClient.SendAsync(requestMsg);
			if (response.IsSuccessStatusCode)
			{
				await SetSuccess(response, string.Empty);
			}
			else
			{
				SetError("an error has occured");
			}
		}
		catch (Exception ex)
		{
			SetError(ex.Message);
		}
		finally
		{
			isLoading = false;
		}
	}

	private async Task<string> GetJWT()
	{
		var jwt = await jsr.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
		if (!string.IsNullOrWhiteSpace(UserMail))
		{
			var dataArray = jwt.Split(';', 2);
			if (dataArray.Length == 2)
				return dataArray[1];
		}
		return string.Empty;
	}

	private void ReloadPreview()
	{
		markupString = (MarkupString)markDownModel.Html;
	}

	private void CheckPreview(bool val)
	{
		checkPreview = val;
	}

	private async Task UpsertMarkDown(HttpMethod method)
	{
		try
		{
			isLoading = true;
			successMessage = string.Empty;
			errorMessage = string.Empty;
			var requestMsg = new HttpRequestMessage(method, $"/api/markdown");
			requestMsg.Headers.Add("Authorization", "Bearer " + await GetJWT());
			requestMsg.Content = new StringContent(JsonConvert.SerializeObject(markDownModel), Encoding.UTF8, "application/json"); ;
			var response = await HttpClient.SendAsync(requestMsg);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized) // NOTE: THEN TOKEN HAS EXPIRED
			{
				await jsr.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				isLoading = false;
				SetError("You are not authorized, please log in again");
				nav.NavigateTo("/", true);
			}
			else if (response.IsSuccessStatusCode)
			{
				var message = method == HttpMethod.Post ?
				"Updated successfully" : method == HttpMethod.Put ? "Created successfully" : string.Empty;
				await SetSuccess(response, message);
			}
			else
			{
				SetError("an error has occured");
			}
		}
		catch (Exception ex)
		{
			SetError(ex.Message);
		}
		finally
		{
			isLoading = false;
		}
	}

	private async Task SetSuccess(HttpResponseMessage response, string message)
	{
		markDownModel = await response.Content.ReadFromJsonAsync<MarkDownModel>();
		markupString = (MarkupString)markDownModel.Html;
		MarkDownId = markDownModel.Id;
		successMessage = message;
	}

	private void SetError(string message)
	{
		markDownModel = new MarkDownModel
		{
			Id = -1,
			Body = string.Empty
		};
		markupString = (MarkupString)markDownModel.Html;
		MarkDownId = markDownModel.Id;
		errorMessage = message;
	}
}
