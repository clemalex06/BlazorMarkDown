@using BlazorMarkDownAppJwt.Client.Components
@using BlazorMarkDownAppJwt.Shared
@using System.Text
@using Newtonsoft.Json
@inject HttpClient HttpClient
@inject IJSRuntime jsr
@inject NavigationManager nav

@if (isLoading)
{
	<div class="spinner"></div>
}
else
{
	if (!string.IsNullOrEmpty(UserMail))
	{
		<div class="row">
			<div class="mb-3 text-right">
				<button class="btn btn-primary" @onclick="UpdatePreview">Update Preview</button>
				<button class="btn btn-primary" @onclick="SaveMarkDown">Save MarkDown</button>
				@if (checkPreview)
				{
					<button class="btn btn-primary" @onclick="()=>CheckPreview(false)">View Html generated</button>
				}
				else
				{
					<button class="btn btn-primary" @onclick="()=>CheckPreview(true)">View Preview generated</button>
				}
			</div>
		</div>
	}
	<div class="row">
		<div class="col-6">
			<h3>MarkDown Editor</h3>
			@if (!string.IsNullOrEmpty(UserMail))
			{
				<textarea class="form-control text-area-resized" @bind="markDownModel.Body"></textarea>
			}
			else
			{
				<textarea class="form-control text-area-resized" disabled @bind="markDownModel.Body"></textarea>
			}
		</div>
		@if (checkPreview)
		{
			<div class="col-6">
				<h3>MarkDown View</h3>
				<div>@markupString</div>
			</div>
		}
		else
		{
			<div class="col-6">
				<h3>MarkDown Html Generated</h3>
				<div>@markDownModel.Html</div>
			</div>
		}
	</div>
}

@code {

	[Parameter]
	public string? UserMail { get; set; }

	private bool isLoading = true;

	private MarkupString markupString;

	private bool checkPreview = true;

	private MarkDownModel markDownModel = new MarkDownModel
		{
			Body = string.Empty
		};


	private void UpdatePreview()
	{
		markupString = (MarkupString)markDownModel.Html;
	}

	private void CheckPreview(bool val)
	{
		checkPreview = val;
	}

	private async Task SaveMarkDown()
	{
		try
		{
			isLoading = true;
			var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"/api/markdown");
			requestMsg.Headers.Add("Authorization", "Bearer " + await GetJWT());
			requestMsg.Content = new StringContent(JsonConvert.SerializeObject(markDownModel), Encoding.UTF8, "application/json"); ;
			var response = await HttpClient.SendAsync(requestMsg);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized) // NOTE: THEN TOKEN HAS EXPIRED
			{
				await jsr.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				isLoading = false;
				nav.NavigateTo("/", true);
			}
		}
		catch (Exception)
		{

		}
		finally
		{
			isLoading = false;
		}

	}

	private async Task<string> GetJWT()
	{
		var jwt = await jsr.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
		if (!string.IsNullOrWhiteSpace(UserMail))
		{
			var dataArray = jwt.Split(';', 2);
			if (dataArray.Length == 2)
				return dataArray[1];
		}
		return string.Empty;
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		isLoading = true;
		try
		{
			var requestMsg = new HttpRequestMessage(HttpMethod.Get, "/api/markdown");
			var response = await HttpClient.SendAsync(requestMsg);
			if (response.IsSuccessStatusCode)
			{
				markDownModel = await response.Content.ReadFromJsonAsync<MarkDownModel>();
				markupString = (MarkupString)markDownModel.Html;
			}
		}
		catch (Exception)
		{
			markDownModel = new MarkDownModel
			{
				Body = string.Empty
			};
		}
		finally
		{
			isLoading = false;
		}
	}

}
