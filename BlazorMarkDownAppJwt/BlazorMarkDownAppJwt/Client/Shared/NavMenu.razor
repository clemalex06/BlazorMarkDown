@inject IJSRuntime jsr

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorMarkDownAppJwt</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="about">
                <span class="oi oi-list-rich" aria-hidden="true"></span> About
            </NavLink>
        </div>
        <div class="nav-item px-3">

                @if (string.IsNullOrWhiteSpace(userMail))
                {
                    <NavLink class="nav-link" href="login">
                        <span class="oi oi-account-login" aria-hidden="true"></span> Login
                    </NavLink>
                }
                else
                {
                    <NavLink class="nav-link" href="logout">
                        <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
                    </NavLink>
                }
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    string? userMail;

	private async Task<string?> GetUserMail()
	{
		var jwt = await jsr.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
		if (!string.IsNullOrWhiteSpace(jwt))
		{
			var dataArray = jwt.Split(';', 2);
			if (dataArray.Length == 2)
				return dataArray[0];
		}
		return null;
	}

    protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		try
		{
			userMail = await GetUserMail();
		}
		catch (Exception)
		{
			await jsr.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
			userMail = null;
		}
	}
}
